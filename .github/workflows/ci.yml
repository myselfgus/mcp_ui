name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: Build & Test (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: TypeScript typecheck
        run: |
          pnpm tsc -p tsconfig.base.json --noEmit

      - name: Run tests (TypeScript + Ruby)
        run: pnpm test

      - name: Build packages
        run: pnpm build

      - name: Upload dist artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: dist-node${{ matrix.node }}
          path: |
            sdks/typescript/*/dist
            docs/src/.vitepress/dist
          if-no-files-found: warn

  ruby:
    name: Ruby Gem Lint/Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
          working-directory: sdks/ruby
      - name: Install dependencies
        working-directory: sdks/ruby
        run: bundle install --jobs 4 --retry 3
      - name: Run specs
        working-directory: sdks/ruby
        run: bundle exec rake spec

  # Optional separate docs build verification
  docs:
    name: Docs Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build docs
        run: pnpm docs:build
      - name: Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-dist
          path: docs/src/.vitepress/dist
          if-no-files-found: error

  python-fast-agent:
    name: Python Fast-Agent Lint & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install uv (fast Python dependency manager)
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Install dependencies (dev)
        working-directory: third_party/fast-agent
        run: |
          ~/.local/bin/uv sync --group dev || ~/.local/bin/uv sync
      - name: Ruff lint
        working-directory: third_party/fast-agent
        run: |
          ~/.local/bin/uv run ruff check src || true
      - name: Run pytest
        working-directory: third_party/fast-agent
        run: |
          ~/.local/bin/uv run pytest -q || ~/.local/bin/uv run pytest -q --maxfail=1

  # Aggregate quality gate
  quality-gate:
    needs: [build-test, ruby, docs, python-fast-agent]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Evaluate result
        run: |
          echo "Build/Test result: ${{ needs.build-test.result }}"
          echo "Ruby result: ${{ needs.ruby.result }}"
          echo "Docs result: ${{ needs.docs.result }}"
          echo "Python Fast-Agent result: ${{ needs.python-fast-agent.result }}"
          if [ "${{ needs.build-test.result }}" != "success" ] || [ "${{ needs.ruby.result }}" != "success" ] || [ "${{ needs.docs.result }}" != "success" ] || [ "${{ needs.python-fast-agent.result }}" != "success" ]; then
            echo "One or more jobs failed" >&2
            exit 1
          fi
          echo "All prerequisite jobs passed."